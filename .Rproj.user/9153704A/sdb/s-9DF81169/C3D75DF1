{
    "contents" : "---\ntitle: \"Classification of execution of exercise Unilateral Dumbbell Biceps Curl\"\nsubtitle: \"Data Science Specialization - Practical Machine Learning - Final Project\"\nauthor: \"by jmvilaverde\"\ndate: \"Thursday, July 16, 2015\"\noutput: html_document\n---\n\n## Background\n\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, our goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. \n\nMore information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \n\n***\n\n## Model creation\n\n### Extract, transform and load data\n\n* The training data for this project are available here: https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\n\n* The test data are available here: https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\n\n_Code 01. Extract files and data._\n```{r extract, echo=TRUE, cache=TRUE}\ninitValues <- function(){\n        \n        #Set URL path\n        URLTraining <<- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\n        URLTesting <<- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\n\n        #Set csv name\n        fileTraining <<- \"training.csv\"\n        fileTesting <<- \"testing.csv\"\n}\n\nextractData <- function(){\n        \n        #Init values and setup access to https\n        initValues()\n        setInternet2(use = TRUE)\n\n        #Adquire training file\n        if (!file.exists(fileTraining)) download.file(URLTraining, fileTraining)\n        trainingData <<- read.csv(fileTraining)\n        \n        #Adquire testing file\n        if (!file.exists(fileTesting)) download.file(URLTesting, fileTesting)\n        testingData <<- read.csv(fileTesting)\n\n}\n\nextractData()\n```\n\n***\n\n### Initial Data analysis\n\nBased on information and data extracted from: (http://groupware.les.inf.puc-rio.br/har#weight_lifting_exercises)\n\n> ###### Please, cite this paper to refer the WLE dataset: Velloso, E.; Bulling, A.; Gellersen, H.; Ugulino, W.; Fuks, H. Qualitative Activity Recognition of Weight Lifting Exercises. Proceedings of 4th International Conference in Cooperation with SIGCHI (Augmented Human '13) . Stuttgart, Germany: ACM SIGCHI, 2013.\n> ###### Read more: (http://groupware.les.inf.puc-rio.br/har#weight_lifting_exercises#ixzz3fnKRBc4a)\n\nThe objective of this data is to define quality of execution.\n\nSix young health participants **(`r unique(trainingData$user_name)`)** were asked to perform **one set of 10 repetitions** of the **Unilateral Dumbbell Biceps Curl** in **five different fashion** that was stored into **classe** variable with these 5 types:\n\nFashion | Classification                         | Type\n------- | -------------------------------------- | -----------\nA       | exactly according to the specification | Correct\nB       | throwing the elbows to the front       | Mistake\nC       | lifting the dumbbell only halfway      | Mistake\nD       | lowering the dumbbell only halfway     | Mistake\nE       | throwing the hips to the front         | Mistake\n\nThere is a total of **`r ncol(trainingData)-1`** variables as predictors. \n\nData collects information from **4 sensors (belt, arm, dumbbell, forearm)**, each sensor has **3 detectors (acceleration, gyroscope and magnetometer)** and each detector has **3 axis (x, y, z)**, that makes a total of **36 variables**. Other sensors variables are derivated from these variables.\n\nFor our analysis model are selected as relevant sensors predictors these variables:\n\n> ##### `r colnames(trainingData[,grep(\"_x$|_y$|_z$\", colnames(trainingData))])`\n\nAlso, exists a **user_name** predictor, that indicates who is the user, including this predictor increases the prediction accuracy when the user has participated on training.\n\nOther relevant predictors are **new\\_window** (indicates start of repetition) and **num\\_window** (indentificates a repetition).\n\n***\n\n### Model: sensors and user name: 39 predictors: X, y and z axis for sensors + user_name + window.\n\n#### Model Proposal\n\nModel is proposed based on these premises:\n\n* It's presumed that sensors are basic to prediction.\n* Because the prediction is about users that participates on training, include user_name as predictor have to improve accuracy.\n* When starts repetition new\\_window and which repetition is num\\_window is relevant to accuracy of prediction. A model tested without these predictors have lower accuracy than model that includes it (98.01% vs 99.59% over testing set).\n\nModel is a combined model Random Forest that is a combination of LDA, GBM and Random Forest model's predictions.\n\n#### Cross validation \n\n* Dataset for training, testing and validanting contains 39 preditors and classe.\n* Separate Training Data into three sets: 60% training set, 20% testing set and 20% validating set.\n* Validation set is used to confirm the results obtained with testing set.\n\n_Code 02. Creation of training, testing and validating sets._\n```{r modelSensorsUserWindowDataSet, message=FALSE}\n\nrequire(caret)\nrequire(kernlab)\nrequire(pROC)\n\n#Seed to be used to obtain the same results\nset.seed(1525)\n\nDataset2 <- trainingData[,grep(\"_x$|_y$|_z$|classe|user|window\", colnames(trainingData))]\n\ninBuild2 <- createDataPartition(y=Dataset2$classe, p=0.8, list=FALSE)\nvalidation2 <- Dataset2[-inBuild2,]\n\nbuildData2 <- Dataset2[inBuild2,]\n\ninTrain2 <- createDataPartition(y=buildData2$classe, p=0.75, list=FALSE)\ntrainingSet2 <- buildData2[inTrain2,]\ntestingSet2 <- buildData2[-inTrain2,]\n\n```\n\nSet             | Training                 | Testing                 | Validating\n--------------- | ------------------------ | ----------------------- | -----------------------\nDimensions      | `r dim(trainingSet2)[1]` | `r dim(testingSet2)[1]` | `r dim(validation2)[1]`\n%               | 60%                      | 20%                     | 20%\n\n\n#### LDA Model: Linear discriminant analysis\n\n_Code 03. LDA Model._\n```{r modelLDASensorsUserWindow, message=FALSE}\nrequire(MASS)\n\n#Section to load a stored model, to avoid to redo the model\nload(\"models/modelLDA2.rda\")\n\n#If doesn't exists, create and train the model\nif (!exists(\"modelLDA2\")) {\n        modelLDA2 <- train(classe ~ ., data = trainingSet2, method=\"lda\")\n        save(modelLDA2, file=\"models/modelLDA2.rda\")\n}\n\n#Predict over testing set\npredictedLDA2 <- predict(modelLDA2, testingSet2)\ncmLDA2t <- confusionMatrix(predictedLDA2, testingSet2$classe)\n\n#Predict over validating set\npredictedLDA2v <- predict(modelLDA2, validation2)\ncmLDA2v <- confusionMatrix(predictedLDA2v, validation2$classe)\n```\n\n\n\n#### Model GBM: Gradient Boosting Machine\n\n_Code 04. GBM Model._\n```{r modelGBMSensorsUserWindow, message=FALSE}\nrequire(gbm)\n\n#Section to load a stored model, to avoid to redo the model\nload(\"models/modelGBM2.rda\")\n\n#If doesn't exists, create and train the model\nif (!exists(\"modelGBM2\")) {\n        modelGBM2 <- train(classe ~ ., data = trainingSet2, method=\"gbm\")\n        save(modelGBM2, file=\"models/modelGBM2.rda\")\n}\n\n#Predict over testing set\npredictedGBM2 <- predict(modelGBM2, testingSet2)\ncmGBM2t <- confusionMatrix(predictedGBM2, testingSet2$classe)\n\n#Predict over validating set\npredictedGBM2v <- predict(modelGBM2, validation2)\ncmGBM2v <- confusionMatrix(predictedGBM2v, validation2$classe)\n```\n\n#### RF model: Random Forest.\n\n* Parameters: do.trace=10, ntree = 100\n\n_Code 05. RF Model._\n```{r modelRFSensorsUserWindow, message=FALSE}\nrequire(randomForest)\n\n#Section to load a stored model, to avoid to redo the model\nload(\"models/modelRF2.rda\")\n\n#If doesn't exists, create and train the model\nif(!exists(\"modelRF2\")) {\n        modelRF2 <- train(classe ~ ., data = trainingSet2, method=\"rf\", do.trace=10, ntree=100)\n        save(modelRF2, file=\"models/modelRF2.rda\")\n}\n\n#Predict over testing set\npredictedRF2 <- predict(modelRF2, testingSet2)\ncmRF2t <- confusionMatrix(predictedRF2, testingSet2$classe)\n\n#Predict over validating set\npredictedRF2v <- predict(modelRF2, validation2)\ncmRF2v <- confusionMatrix(predictedRF2v, validation2$classe)\n```\n\n#### Combined model: Random forest from other model's predictions\n\n* Parameters: do.trace=10, ntree = 100\n\n_Code 06. Combined Model Random forest._\n```{r modelCombSensorsUserWindow, message=FALSE}\npredCompDF2 <- data.frame(predictedLDA2, predictedGBM2, predictedRF2, classe=testingSet2$classe)\n\n#Section to load a stored model, to avoid to redo the model\nload(\"models/combMod2.rda\")\n\n#If doesn't exists, create and train the model\nif(!exists(\"combMod2\")) {\n        combMod2 <- train(classe ~ ., data = predCompDF2, method=\"rf\", do.trace=10, ntree=100)\n        save(combMod2, file=\"models/combMod2.rda\")\n}\n\n#Predict over testing set\ncombPred2 <- predict(combMod2, testingSet2)\ncmComb2t <- confusionMatrix(combPred2, testingSet2$classe)\n\n#Predict over validating set\nvalidationDataComb <- data.frame(predictedLDA2v, predictedGBM2v, predictedRF2v, y=validation2$classe)\ncolnames(validationDataComb) <- colnames(predCompDF2)\ncombPred2v <- predict(combMod2, validationDataComb)\ncmComb2v <- confusionMatrix(combPred2v, validationDataComb$classe)\n```\n\n\n_Figure 01. Final combined model_\n```{r finalModel, echo=FALSE} \ncombMod2$finalModel\n```\n\n\n\n_Figure 02. Estimated accuracy for testing set with this predictors._\n\nModel | Accuracy                                         | Accuracy 95%\n----- | ------------------------------------------------ | ------------------------- \nLDA   | `r round((cmLDA2t$overall[\"Accuracy\"])*100,2)`%  | `r round((cmLDA2t$overall[c(\"AccuracyLower\", \"AccuracyUpper\")])*100,2)`%\nGBM   | `r round((cmGBM2t$overall[\"Accuracy\"])*100,2)`%  | `r round((cmGBM2t$overall[c(\"AccuracyLower\", \"AccuracyUpper\")])*100,2)`%\nRF    | `r round((cmRF2t$overall[\"Accuracy\"])*100,2)`%   | `r round((cmRF2t$overall[c(\"AccuracyLower\", \"AccuracyUpper\")])*100,2)`%\nCombined | `r round((cmComb2t$overall[\"Accuracy\"])*100,2)`% | `r round((cmComb2t$overall[c(\"AccuracyLower\", \"AccuracyUpper\")])*100,2)`%\n\n\n\n_Figure 03. Final combined model - Out of sample error (OSE) (1-Accuracy) over testing & validating set._\n\nSet        | Out of sample error                                | Out of sample error 95% confidence interval\n---------- | -------------------------------------------------- | --------------------------------------------\nTesting    | `r round((1-cmComb2t$overall[\"Accuracy\"])*100,2)`% | `r round((1-cmComb2t$overall[c(\"AccuracyLower\", \"AccuracyUpper\")])*100,2)`% \nValidating | `r round((1-cmComb2v$overall[\"Accuracy\"])*100,2)`% | `r round((1-cmComb2v$overall[c(\"AccuracyLower\", \"AccuracyUpper\")])*100,2)`%\n\n***\n\n## Prediction to submit\n\n_Code 07. Prediction of classe._\n```{r predictions, message=FALSE}\n#Prediction of testingData Set to upload as result\ntpredictedLDA2 <- predict(modelLDA2, testingData)\ntpredictedGBM2 <- predict(modelGBM2, testingData)\ntpredictedRF2 <- predict(modelRF2, testingData)\n\nnewdataset2 <- data.frame(tpredictedLDA2, tpredictedGBM2, tpredictedRF2)\ncolnames(newdataset2) <- colnames(predCompDF2[,1:3])\n\ntpredictedComb2 <- predict(combMod2, newdata = newdataset2)\n```\n\n> Prediction results for combined model: `r tpredictedComb2`",
    "created" : 1436988524237.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1219488865",
    "id" : "C3D75DF1",
    "lastKnownWriteTime" : 1437073056,
    "path" : "D:/Privado/repos/8.PracticalMachineLearning/DataScienceSpecialization-8.PML-FinalProject/FinalProject.Rmd",
    "project_path" : "FinalProject.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}