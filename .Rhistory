extract <- function() {
adquireData()
}
extract()
require(caret)
require(kernlab)
require(pROC) #varImp()
set.seed(1525)
Dataset <- trainingData[,grep("_x$|_y$|_z$|classe", colnames(trainingData))]
inBuild <- createDataPartition(y=Dataset$classe, p=0.7, list=FALSE)
validation <- Dataset[-inBuild,]
buildData <- Dataset[inBuild,]
inTrain <- createDataPartition(y=buildData$classe, p=0.7, list=FALSE)
trainingSet <- buildData[inTrain,]
testingSet <- buildData[-inTrain,]
dim(trainingSet)
dim(testingSet)
dim(validation)
modelGLM <- train(classe ~ ., data = trainingSet, method="glm")
require(MASS)
modelLDA <- train(classe ~ ., data = trainingSet, method="lda")
save("modelLDA", file="modelLDA.rda")
varImp(modelLDA)
predictedLDA <- predict(modelLDA, testingSet)
confusionMatrix(predictedLDA, testingSet$classe)
require(gbm)
modelGBM <- train(classe ~ ., data = trainingSet, method="gbm")
save(modelGBM, file="modelGBM.rda")
initValues <- function(){
#Set URL path
URLTraining <<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTesting <<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#Set csv name
fileTraining <<- "training.csv"
fileTesting <<- "testing.csv"
}
adquireData <- function(){
initValues()
setInternet2(use = TRUE)
#Adquire training file
if (!file.exists(fileTraining)) download.file(URLTraining, fileTraining)
trainingData <<- read.csv(fileTraining)
#Adquire testing file
if (!file.exists(fileTesting)) download.file(URLTesting, fileTesting)
testingData <<- read.csv(fileTesting)
}
extract <- function() {
adquireData()
}
extract()
require(caret)
require(kernlab)
require(pROC) #varImp()
set.seed(1525)
Dataset <- trainingData[,grep("_x$|_y$|_z$|classe", colnames(trainingData))]
inBuild <- createDataPartition(y=Dataset$classe, p=0.7, list=FALSE)
validation <- Dataset[-inBuild,]
buildData <- Dataset[inBuild,]
inTrain <- createDataPartition(y=buildData$classe, p=0.7, list=FALSE)
trainingSet <- buildData[inTrain,]
testingSet <- buildData[-inTrain,]
dim(trainingSet)
dim(testingSet)
dim(validation)
require(MASS)
load("modelLDA.rda")
predictedLDA <- predict(modelLDA, testingSet)
confusionMatrix(predictedLDA, testingSet$classe)
require(gbm)
load("modelGBM.rda")
predictedGBM <- predict(modelGBM, testingSet)
confusionMatrix(predictedGBM, testingSet$classe)
qplot(predictedLDA, predictedGBM, colour=classe, data = testingSet)
require(randomForest)
modelRF <- train(classe ~ ., data = trainingSet, method="rf", do.trace=10, ntree=100)
predictedRF <- predict(modelRF, testingSet)
confusionMatrix(predictedRF, testingSet$classe)
predCompDF <- data.frame(predictedLDA, predictedGBM, predictedRF, y=testingSet$classe)
combMod <- train(y ~ ., data = predCompDF, method="rf", do.trace=10, ntree=100)
save("combMod", file="combMod.rda")
combPred <- predict(combMod, testingSet)
confusionMatrix(combPred, testingSet$classe)
tpredictedLDA <- predict(modelLDA, testingData)
tpredictedGBM <- predict(modelGBM, testingData)
tpredictedRF <- predict(modelRF, testingData)
load("model2RF.rda")
tpredictedRF2 <- predict(model2RF, testingData)
tpredictedLDA
tpredictedGBM
tpredictedRF
tpredictedRF2
load("model2GBM.rda")
tpredictedGBM2 <- predict(model2GBM, testingData)
tpredictedGBM2
tpredictedComb <- predict(combMod, newdata = testingData)
predCompDF
head(tpredictedGBM)
head(predCompDF)
tpredictedComb <- predict(combMod, newdata = data.frame(tpredictedLDA, tpredictedGBM, tpredictedRF))
newdataset <- data.frame(tpredictedLDA, tpredictedGBM, tpredictedRF)
colnames(newdataset) <- colnames(predCompDF[,1:3])
colnames(newdataset)
tpredictedComb <- predict(combMod, newdata = newdataset)
result <- rbind(seq(1:20), tpredictedLDA, tpredictedGBM, tpredictedRF, tpredictedComb)
result
set.seed(1525)
Dataset2 <- trainingData[,grep("_x$|_y$|_z$|classe|user|window", colnames(trainingData))]
inBuild2 <- createDataPartition(y=Dataset2$classe, p=0.7, list=FALSE)
validation2 <- Dataset2[-inBuild2,]
buildData2 <- Dataset2[inBuild2,]
inTrain2 <- createDataPartition(y=buildData2$classe, p=0.7, list=FALSE)
trainingSet2 <- buildData2[inTrain2,]
testingSet2 <- buildData2[-inTrain2,]
modelGLM2 <- train(classe ~ ., data = trainingSet2, method="glm")
require(MASS)
modelLDA2 <- train(classe ~ ., data = trainingSet2, method="lda")
save("modelLDA2", file="modelLDA2.rda")
predictedLDA2 <- predict(modelLDA2, testingSet2)
confusionMatrix(predictedLDA2, testingSet2$classe)
require(gbm)
sys.date()
Sys.time()
modelGBM2 <- train(classe ~ ., data = trainingSet2, method="gbm")
Sys.time()
save(modelGBM2, file="modelGBM2.rda")
predictedGBM2 <- predict(modelGBM2, testingSet2)
confusionMatrix(predictedGBM2, testingSet2$classe)
require(randomForest)
Sys.time()
modelRF2 <- train(classe ~ ., data = trainingSet2, method="rf", do.trace=10, ntree=100)
Sys.time()
save(modelRF2, file="modelRF2.rda")
predictedRF2 <- predict(modelRF2, testingSet2)
confusionMatrix(predictedRF2, testingSet$classe)
predCompDF2 <- data.frame(predictedLDA2, predictedGBM2, predictedRF2, y=testingSet2$classe)
Sys.time()
combMod2 <- train(y ~ ., data = predCompDF2, method="rf", do.trace=10, ntree=100)
Sys.time()
save("combMod2", file="combMod2.rda")
combPred2 <- predict(combMod2, testingSet2)
confusionMatrix(combPred2, testingSet2$classe)
tpredictedLDA2 <- predict(modelLDA2, testingData2)
tpredictedLDA2 <- predict(modelLDA2, testingData)
tpredictedGBM2 <- predict(modelGBM2, testingData)
tpredictedRF2 <- predict(modelRF2, testingData)
newdataset2 <- data.frame(tpredictedLDA2, tpredictedGBM2, tpredictedRF2)
colnames(newdataset2) <- colnames(predCompDF2[,1:3])
tpredictedComb2 <- predict(combMod2, newdata = newdataset2)
result <- rbind(seq(1:20), tpredictedLDA2, tpredictedGBM2, tpredictedRF2, tpredictedComb2)
result2 <- rbind(seq(1:20), tpredictedLDA2, tpredictedGBM2, tpredictedRF2, tpredictedComb2)
result2
result <- rbind(seq(1:20), tpredictedLDA, tpredictedGBM, tpredictedRF, tpredictedComb)
result1
result2
confusionMatrix(predictedLDA2, testingSet2$classe)
auc(testingSet2$classe, predictedLDA2)
?auc
auc(testingSet2$classe, modelLDA2)
auc(testingSet2$classe, testingSet2)
testingSet2
auc(testingSet2$classe, testingSet2[,-40])
confusionMatrix(predictedLDA2, testingSet2$classe)
confusionMatrix(predictedRF2, testingSet$classe)
predictedLDA2v <- predict(modelLDA2, validation2)
confusionMatrix(predictedLDA2v, validation2$classe)
predictedGBM2v <- predict(modelGBM2, validation2)
confusionMatrix(predictedGBM2v, validation2$classe)
predictedRF2 <- predict(modelRF2, testingSet2)
confusionMatrix(predictedRF2, testingSet2$classe)
predictedRF2v <- predict(modelRF2, validation2)
confusionMatrix(predictedRF2v, validation2$classe)
combPred2 <- predict(combMod2, testingSet2)
confusionMatrix(combPred2, testingSet2$classe)
# Accuracy : 0.9956
combPred2v <- predict(combMod2, validation2)
confusionMatrix(combPred2v, validation2$classe)
combPred2v <- predict(combMod2, validation2)
combPred2v <- predict(combMod2, validation2)
validationDataComb <- data.frame(predictedRLDA2v, predictedGBM2v, predictedRF2v, y=validation2$classe)
validationDataComb <- data.frame(predictedLDA2v, predictedGBM2v, predictedRF2v, y=validation2$classe)
combPred2v <- predict(combMod2, validationDataComb)
head(validationDataComb)
validationDataComb <- data.frame(predictedLDA2v, predictedGBM2v, predictedRF2v, y=validation2$classe)
colnames(validationDataComb) <- colnames(predCompDF2)
combPred2v <- predict(combMod2, validationDataComb)
confusionMatrix(combPred2v, validationDataComb$classe)
combPred2v
validationDataComb$classe
validationDataComb
colnames(validationDataComb) <- colnames(predCompDF2)
colnames(predCompDF2)
predCompDF2 <- data.frame(predictedLDA2, predictedGBM2, predictedRF2, classe=testingSet2$classe)
combMod2 <- train(classe ~ ., data = predCompDF2, method="rf", do.trace=10, ntree=100)
save("combMod2", file="combMod2.rda")
combPred2 <- predict(combMod2, testingSet2)
confusionMatrix(combPred2, testingSet2$classe)
validationDataComb <- data.frame(predictedLDA2v, predictedGBM2v, predictedRF2v, y=validation2$classe)
colnames(validationDataComb) <- colnames(predCompDF2)
combPred2v <- predict(combMod2, validationDataComb)
confusionMatrix(combPred2v, validationDataComb$classe)
tpredictedLDA2 <- predict(modelLDA2, testingData)
tpredictedGBM2 <- predict(modelGBM2, testingData)
tpredictedRF2 <- predict(modelRF2, testingData)
newdataset2 <- data.frame(tpredictedLDA2, tpredictedGBM2, tpredictedRF2)
colnames(newdataset2) <- colnames(predCompDF2[,1:3])
tpredictedComb2 <- predict(combMod2, newdata = newdataset2)
result2 <- rbind(seq(1:20), tpredictedLDA2, tpredictedGBM2, tpredictedRF2, tpredictedComb2)
result1
result2
tpredictedGBM2
result2 <- cbind(seq(1:20), tpredictedLDA2, tpredictedGBM2, tpredictedRF2, tpredictedComb2)
result2
result2 <- cbind(seq(1:20), as.character(tpredictedLDA2), tpredictedGBM2, tpredictedRF2, tpredictedComb2)
result2
result2 <- cbind(seq(1:20), as.character(tpredictedLDA2), as.character(tpredictedGBM2), as.character(tpredictedRF2), as.character(tpredictedComb2))
result2
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(result2[,5])
tpredictedComb2
pml_write_files(tpredictedComb2)
initValues <- function(){
#Set URL path
URLTraining <<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTesting <<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#Set csv name
fileTraining <<- "training.csv"
fileTesting <<- "testing.csv"
}
adquireData <- function(){
initValues()
setInternet2(use = TRUE)
#Adquire training file
if (!file.exists(fileTraining)) download.file(URLTraining, fileTraining)
trainingData <<- read.csv(fileTraining)
#Adquire testing file
if (!file.exists(fileTesting)) download.file(URLTesting, fileTesting)
testingData <<- read.csv(fileTesting)
}
extract <- function() {
adquireData()
}
extract()
require(caret)
require(kernlab)
require(pROC) #varImp()
set.seed(1525)
Dataset <- trainingData[,grep("_x$|_y$|_z$|classe", colnames(trainingData))]
inBuild <- createDataPartition(y=Dataset$classe, p=0.7, list=FALSE)
validation <- Dataset[-inBuild,]
buildData <- Dataset[inBuild,]
inTrain <- createDataPartition(y=buildData$classe, p=0.7, list=FALSE)
trainingSet <- buildData[inTrain,]
testingSet <- buildData[-inTrain,]
require(MASS)
load("modelLDA.rda")
predictedLDA <- predict(modelLDA, testingSet)
confusionMatrix(predictedLDA, testingSet$classe)
require(gbm)
load("modelGBM.rda")
predictedGBM <- predict(modelGBM, testingSet)
confusionMatrix(predictedGBM, testingSet$classe)
require(randomForest)
load("modelRF.rda")
predictedRF <- predict(modelRF, testingSet)
require(caret)
require(kernlab)
require(pROC) #varImp()
set.seed(1525)
Dataset3 <- trainingData[,grep("_x$|_y$|_z$|classe|user", colnames(trainingData))]
inBuild3 <- createDataPartition(y=Dataset3$classe, p=0.7, list=FALSE)
validation3 <- Dataset3[-inBuild3,]
buildData3 <- Dataset3[inBuild3,]
inTrain3 <- createDataPartition(y=buildData3$classe, p=0.7, list=FALSE)
trainingSet3 <- buildData3[inTrain3,]
testingSet3 <- buildData3[-inTrain3,]
require(MASS)
modelLDA3 <- train(classe ~ ., data = trainingSet3, method="lda")
save("modelLDA3", file="models/modelLDA3.rda")
save("modelLDA3", file="models/modelLDA3.rda")
predictedLDA3 <- predict(modelLDA3, testingSet3)
confusionMatrix(predictedLDA3, testingSet3$classe)
predictedLDA3v <- predict(modelLDA3, validation3)
confusionMatrix(predictedLDA3v, validation3$classe)
require(gbm)
Sys.time()
modelGBM3 <- train(classe ~ ., data = trainingSet3, method="gbm")
Sys.time()
save(modelGBM3, file="models/modelGBM3.rda")
predictedGBM3 <- predict(modelGBM3, testingSet3)
confusionMatrix(predictedGBM3, testingSet3$classe)
predictedGBM3v <- predict(modelGBM3, validation3)
confusionMatrix(predictedGBM3v, validation3$classe)
require(randomForest)
Sys.time()
modelRF3 <- train(classe ~ ., data = trainingSet3, method="rf", do.trace=10, ntree=100)
Sys.time()
save(modelRF3, file="models/modelRF3.rda")
predictedRF3 <- predict(modelRF3, testingSet3)
confusionMatrix(predictedRF3, testingSet3$classe)
predictedRF3v <- predict(modelRF3, validation3)
confusionMatrix(predictedRF3v, validation3$classe)
predCompDF3 <- data.frame(predictedLDA3, predictedGBM3, predictedRF3, classe=testingSet3$classe)
combMod3 <- train(classe ~ ., data = predCompDF3, method="rf", do.trace=10, ntree=100)
save("combMod3", file="models/combMod3.rda")
combPred3 <- predict(combMod3, testingSet3)
confusionMatrix(combPred3, testingSet3$classe)
validationDataComb <- data.frame(predictedLDA3v, predictedGBM3v, predictedRF3v, y=validation3$classe)
colnames(validationDataComb) <- colnames(predCompDF3)
combPred3v <- predict(combMod3, validationDataComb)
confusionMatrix(combPred3v, validationDataComb$classe)
tpredictedLDA3 <- predict(modelLDA3, testingData)
tpredictedGBM3 <- predict(modelGBM3, testingData)
tpredictedRF3 <- predict(modelRF3, testingData)
newdataset3 <- data.frame(tpredictedLDA3, tpredictedGBM3, tpredictedRF3)
colnames(newdataset3) <- colnames(predCompDF3[,1:3])
tpredictedComb3 <- predict(combMod3, newdata = newdataset3)
result3 <- cbind(seq(1:20), as.character(tpredictedLDA3), as.character(tpredictedGBM3), as.character(tpredictedRF3), as.character(tpredictedComb3))
result3
Dataset2 <- trainingData[,grep("_x$|_y$|_z$|classe|user|window", colnames(trainingData))]
inBuild2 <- createDataPartition(y=Dataset2$classe, p=0.7, list=FALSE)
validation2 <- Dataset2[-inBuild2,]
buildData2 <- Dataset2[inBuild2,]
inTrain2 <- createDataPartition(y=buildData2$classe, p=0.7, list=FALSE)
trainingSet2 <- buildData2[inTrain2,]
testingSet2 <- buildData2[-inTrain2,]
load("modelLDA2.rda")
predictedLDA2 <- predict(modelLDA2, testingSet2)
confusionMatrix(predictedLDA2, testingSet2$classe)
#Accuracy : 0.6763 Low
predictedLDA2v <- predict(modelLDA2, validation2)
confusionMatrix(predictedLDA2v, validation2$classe)
load("modelGBM2.rda")
predictedGBM2 <- predict(modelGBM2, testingSet2)
confusionMatrix(predictedGBM2, testingSet2$classe)
predictedGBM2v <- predict(modelGBM2, validation2)
confusionMatrix(predictedGBM2v, validation2$classe)
load("modelRF2.rda")
predictedRF2 <- predict(modelRF2, testingSet2)
confusionMatrix(predictedRF2, testingSet2$classe)
predictedRF2v <- predict(modelRF2, validation2)
confusionMatrix(predictedRF2v, validation2$classe)
predCompDF2 <- data.frame(predictedLDA2, predictedGBM2, predictedRF2, classe=testingSet2$classe)
load("combMod2.rda")
combPred2 <- predict(combMod2, testingSet2)
confusionMatrix(combPred2, testingSet2$classe)
validationDataComb <- data.frame(predictedLDA2v, predictedGBM2v, predictedRF2v, y=validation2$classe)
colnames(validationDataComb) <- colnames(predCompDF2)
combPred2v <- predict(combMod2, validationDataComb)
confusionMatrix(combPred2v, validationDataComb$classe)
tpredictedLDA2 <- predict(modelLDA2, testingData)
tpredictedGBM2 <- predict(modelGBM2, testingData)
tpredictedRF2 <- predict(modelRF2, testingData)
newdataset2 <- data.frame(tpredictedLDA2, tpredictedGBM2, tpredictedRF2)
colnames(newdataset2) <- colnames(predCompDF2[,1:3])
tpredictedComb2 <- predict(combMod2, newdata = newdataset2)
result2 <- cbind(seq(1:20), as.character(tpredictedLDA2), as.character(tpredictedGBM2), as.character(tpredictedRF2), as.character(tpredictedComb2))
result2
unique(trainingData$user_name)
unique(testingData$user_name)
str(trainingData)
names(trainingData)
grep("_x$|_y$|_z$|classe", colnames(trainingData))
colnames(trainingData[,grep("_x$|_y$|_z$|classe", colnames(trainingData))])
colnames(trainingData[,grep("user", colnames(trainingData))])
colnames(trainingData[,grep("|user", colnames(trainingData))])
colnames(trainingData[,grep("^user", colnames(trainingData))])
colnames(trainingData))
colnames(trainingData)
colnames(trainingData[,grep("user^", colnames(trainingData))])
colnames(trainingData[,grep("user|window", colnames(trainingData))])
colnames(trainingData[,grep("window$", colnames(trainingData))])
colnames(trainingData[,grep("user_name", colnames(trainingData))])
colnames(trainingData[,grep("name$", colnames(trainingData))])
colnames(trainingData[,2])
colnames(trainingData[,1:10])
colnames(trainingData[,1])
colnames(trainingData[,2])
colnames(trainingData[,3])
colnames(trainingData[,4])
colnames(trainingData[,5])
colnames(trainingData[,6])
colnames(trainingData[,7])
colnames(trainingData[,,grep("_x$|_y$|_z$|classe", colnames(trainingData))])
colnames(trainingData[,,grep("_x$|_y$|_z$|classe", colnames(trainingData))])
colnames(trainingData[,grep("_x$|_y$|_z$", colnames(trainingData))])
colnames(trainingData[,grep("user", colnames(trainingData))])
colnames(trainingData[,grep("user_name", colnames(trainingData))])
colnames(trainingData[,2])
colnames(trainingData[,2]
trainingData[,2]
class(trainingData[,2])
colnames(trainingData[,grep("window$", colnames(trainingData))])
names(trainingData)
trainingData$raw_timestamp_part_1
trainingData$raw_timestamp_part_2
colnames(trainingData[,grep("timestamp", colnames(trainingData))])
require(caret)
require(kernlab)
require(pROC) #varImp()
set.seed(1525)
require(caret)
require(kernlab)
require(pROC) #varImp()
#Create a model only using x y z axis and classe
set.seed(1525)
Dataset <- trainingData[,grep("_x$|_y$|_z$|user|classe", colnames(trainingData))]
inBuild <- createDataPartition(y=Dataset$classe, p=0.8, list=FALSE)
validation <- Dataset[-inBuild,]
buildData <- Dataset[inBuild,]
inTrain <- createDataPartition(y=buildData$classe, p=0.75, list=FALSE)
trainingSet <- buildData[inTrain,]
testingSet <- buildData[-inTrain,]
dim(trainingSet)
dim(testingSet)
dim(validation)
initValues <- function(){
#Set URL path
URLTraining <<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
URLTesting <<- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
#Set csv name
fileTraining <<- "training.csv"
fileTesting <<- "testing.csv"
}
extractData <- function(){
initValues()
setInternet2(use = TRUE)
#Adquire training file
if (!file.exists(fileTraining)) download.file(URLTraining, fileTraining)
trainingData <<- read.csv(fileTraining)
#Adquire testing file
if (!file.exists(fileTesting)) download.file(URLTesting, fileTesting)
testingData <<- read.csv(fileTesting)
}
extractData()
set.seed(1525)
Dataset <- trainingData[,grep("_x$|_y$|_z$|user|classe", colnames(trainingData))]
inBuild <- createDataPartition(y=Dataset$classe, p=0.8, list=FALSE)
validation <- Dataset[-inBuild,]
buildData <- Dataset[inBuild,]
inTrain <- createDataPartition(y=buildData$classe, p=0.75, list=FALSE)
trainingSet <- buildData[inTrain,]
testingSet <- buildData[-inTrain,]
dim(trainingSet)
dim(testingSet)
dim(validation)
require(MASS)
modelLDA <- train(classe ~ ., data = trainingSet, method="lda")
save("modelLDA", file="models\modelLDA.rda")
save("modelLDA", file="models\modelLDA.rda")
save(modelLDA, file="models\modelLDA.rda")
save(modelLDA, file="models/modelLDA.rda")
predictedLDA <- predict(modelLDA, testingSet)
confusionMatrix(predictedLDA, testingSet$classe)
predictedLDAv <- predict(modelLDA, validation)
confusionMatrix(predictedLDAv, validation$classe)
require(gbm)
modelGBM <- train(classe ~ ., data = trainingSet, method="gbm")
save(modelGBM, file="models/modelGBM.rda")
predictedGBM <- predict(modelGBM, testingSet)
confusionMatrix(predictedGBM, testingSet$classe)
predictedGBMv <- predict(modelGBM, validation)
confusionMatrix(predictedGBMv, validation$classe)
require(randomForest)
modelRF <- train(classe ~ ., data = trainingSet, method="rf", do.trace=10, ntree=100)
save(modelRF, file="models/modelRF.rda")
predictedRF <- predict(modelRF, testingSet)
confusionMatrix(predictedRF, testingSet$classe)
predictedRFv <- predict(modelRF, validation)
confusionMatrix(predictedRFv, validation$classe)
predCompDF <- data.frame(predictedLDA, predictedGBM, predictedRF, y=testingSet$classe)
combMod <- train(y ~ ., data = predCompDF, method="rf", do.trace=10, ntree=100)
save("combMod", file="models/combMod.rda")
combPred <- predict(combMod, testingSet)
confusionMatrix(combPred, testingSet$classe)
combPredv <- predict(combMod, validation)
confusionMatrix(combPredv, validation$classe)
tpredictedLDA <- predict(modelLDA, testingData)
tpredictedGBM <- predict(modelGBM, testingData)
tpredictedRF <- predict(modelRF, testingData)
newdataset <- data.frame(tpredictedLDA, tpredictedGBM, tpredictedRF)
colnames(newdataset) <- colnames(predCompDF[,1:3])
tpredictedComb <- predict(combMod, newdata = newdataset)
result <- rbind(seq(1:20), tpredictedLDA, tpredictedGBM, tpredictedRF, tpredictedComb)
result
result <- rbind(seq(1:20), as.character(tpredictedLDA), as.character(tpredictedGBM), as.character(tpredictedRF), as.character(tpredictedComb))
result
tpredictedComb
?train
modelRpart <- train(classe ~ ., data = trainingSet, method="rpart", metric="ROC")
require(rpart)
modelRpart <- train(classe ~ ., data = trainingSet, method="rpart", metric="ROC", trControl=fitControl)
modelTree <- tree(classe ~ ., data = trainingSet)
require(tree)
install.packages("tree")
modelTree <- tree(classe ~ ., data = trainingSet)
require(tree)
modelTree <- tree(classe ~ ., data = trainingSet)
save(modelTree, file="models/modelTree.rda")
predictedTree <- predict(modelTree, testingSet)
confusionMatrix(predictedTree, testingSet$classe)
predictedTree <- predict(modelTree, testingSet)
confusionMatrix(predictedTree, testingSet$classe)
combPred <- predict(combMod, testingSet)
confusionMatrix(combPred, testingSet$classe)
combPredv <- predict(combMod, validation)
confusionMatrix(combPredv, validation$classe)
